question,answer,context
List all products along with their prices.,"SELECT name, price FROM Products;","Products (product_id, name, price, stock_quantity)"
Retrieve the total number of products in stock.,SELECT SUM(stock_quantity) AS total_stock FROM Products;,"Products (product_id, name, price, stock_quantity)"
Show all orders along with the corresponding order dates.,"SELECT order_id, order_date FROM Orders;","Orders (order_id, customer_id, order_date)"
Display the names of customers who placed orders.,"SELECT DISTINCT c.first_name, c.last_name FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id;","Orders (order_id, customer_id, order_date), Customers (customer_id, first_name, last_name)"
List all products along with their quantities ordered.,"SELECT p.name, oi.quantity FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id;","Order_Items (order_item_id, order_id, product_id, quantity, unit_price), Products (product_id, name)"
Retrieve the total number of orders placed.,SELECT COUNT(order_id) AS total_orders FROM Orders;,"Orders (order_id, customer_id, order_date)"
Show the total amount spent by each customer.,"SELECT o.customer_id, SUM(oi.quantity * oi.unit_price) AS total_spent FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.customer_id;","Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
List all products along with their quantities in stock and prices.,"SELECT name, stock_quantity, price FROM Products;","Products (product_id, name, price, stock_quantity)"
Show the orders placed on 13-06-2023.,SELECT * FROM Orders WHERE order_date = '13-06-2023';,"Orders (order_id, customer_id, order_date)"
Display the total revenue generated from product sales.,SELECT SUM(quantity * unit_price) AS total_revenue FROM Order_Items;,"Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
List all customers who have placed orders along with their contact information.,"SELECT c.first_name, c.last_name, c.email, c.phone FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id;","Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date)"
Show the total quantity of each product sold.,"SELECT product_id, SUM(quantity) AS total_quantity_sold FROM Order_Items GROUP BY product_id;","Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Display the orders placed by a specific customer 154.,SELECT * FROM Orders WHERE customer_id = '154';,"Orders (order_id, customer_id, order_date)"
List all products sorted by their prices in descending order.,SELECT * FROM Products ORDER BY price DESC;,"Products (product_id, name, price, stock_quantity)"
Retrieve the average price of all products.,SELECT AVG(price) AS average_price FROM Products;,"Products (product_id, name, price, stock_quantity)"
Show the orders placed within a specific date range '15-01-2024' AND '15-03-2024'.,SELECT * FROM Orders WHERE order_date BETWEEN '15-01-2024' AND '15-03-2024';,"Orders (order_id, customer_id, order_date)"
Display the customers who spent more than 10000.,"SELECT c.customer_id, c.first_name, c.last_name, SUM(oi.quantity * oi.unit_price) AS total_spent FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id HAVING SUM(oi.quantity * oi.unit_price) > '10000';","Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
List all orders along with the products ordered and their quantities.,"SELECT o.order_id, p.name AS product_name, oi.quantity FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;","Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price), Products (product_id, name)"
Show the top 5 customers who spent the most.,"SELECT c.customer_id, c.first_name, c.last_name, SUM(oi.quantity * oi.unit_price) AS total_spent FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id ORDER BY total_spent DESC LIMIT 5;","Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Display the orders with a total amount greater than 30000.,"SELECT o.order_id, SUM(oi.quantity * oi.unit_price) AS total_amount FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING total_amount > '30000';","Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
"List all products along with their prices and quantities in stock, sorted by their names alphabetically.","SELECT name, price, stock_quantity FROM Products ORDER BY name;","Products (product_id, name, price, stock_quantity)"
Retrieve the total number of customers in the database.,SELECT COUNT(customer_id) AS total_customers FROM Customers;,"Customers (customer_id, first_name, last_name, email, phone)"
Show the orders placed on weekends.,"SELECT * FROM Orders WHERE EXTRACT(DOW FROM order_date) IN (0, 6);","Orders (order_id, customer_id, order_date)"
Display the customers who have not placed any orders.,SELECT c.* FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date)"
List all products with prices above 15000.,SELECT * FROM Products WHERE price > '15000';,"Products (product_id, name, price, stock_quantity)"
Retrieve the total revenue generated from each category of products.,"SELECT p.category_id, SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.category_id;","Products (product_id, name, price, stock_quantity, category_id), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Show the orders placed by customers with gmail email domain.,SELECT o.* FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.email LIKE '%@gmail.com';,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date)"
Display the orders placed by customers from Kolkata.,SELECT o.* FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.city = 'Kolkata';,"Customers (customer_id, first_name, last_name, email, phone, city), Orders (order_id, customer_id, order_date)"
List all products along with their categories.,"SELECT p.name AS product_name, c.name AS category_name FROM Products p JOIN Categories c ON p.category_id = c.category_id;","Products (product_id, name, price, stock_quantity, category_id), Categories (category_id, name)"
List all products that are out of stock.,SELECT * FROM Products WHERE stock_quantity = 0;,"Products (product_id, name, price, stock_quantity)"
Retrieve the total number of unique customers who have placed orders.,SELECT COUNT(DISTINCT customer_id) AS unique_customers FROM Orders;,"Orders (order_id, customer_id, order_date)"
Show the average quantity of products ordered per order.,SELECT AVG(quantity) AS avg_quantity_ordered FROM Order_Items;,"Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Display the orders placed by customers in India.,SELECT o.* FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.country = India;,"Customers (customer_id, first_name, last_name, email, phone, country), Orders (order_id, customer_id, order_date)"
"List all products along with their prices and quantities in stock, sorted by their prices in descending order.","SELECT name, price, stock_quantity FROM Products ORDER BY price DESC;","Products (product_id, name, price, stock_quantity)"
Retrieve the total revenue generated from orders placed in April.,SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id WHERE EXTRACT(MONTH FROM o.order_date) ='04';,"Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Show the products with prices within 1500 and 20000.,SELECT * FROM Products WHERE price BETWEEN ‘1500’ AND ‘20000’;,"Products (product_id, name, price, stock_quantity)"
Display the orders placed by customers with phone number prefix 95.,SELECT o.* FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.phone LIKE ‘95%’;,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date)"
"List all products along with the categories they belong to, sorted alphabetically by category name.","SELECT p.name AS product_name, c.name AS category_name FROM Products p JOIN Categories c ON p.category_id = c.category_id ORDER BY c.name;","Products (product_id, name, price, stock_quantity, category_id), Categories (category_id, name)"
Retrieve the total number of orders placed on weekdays.,SELECT COUNT(*) AS total_weekday_orders FROM Orders WHERE EXTRACT(DOW FROM order_date) BETWEEN 1 AND 5;,"Orders (order_id, customer_id, order_date)"
Show the customers who have placed orders more than once.,SELECT c.* FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(o.order_id) > 1;,"Orders (order_id, customer_id, order_date)"
Display the products with a price lower than 5000.,SELECT * FROM Products WHERE price < '5000';,"Products (product_id, name, price, stock_quantity)"
List all orders along with the total quantity of products ordered in each order.,"SELECT o.order_id, SUM(oi.quantity) AS total_quantity_ordered FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id;","Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Retrieve the total revenue generated from orders placed by customers in Delhi.,SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE c.city = 'Delhi';,"Customers (customer_id, first_name, last_name, email, phone, city), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Show the orders containing a specific product 500.,SELECT * FROM Order_Items WHERE product_id = '500';,"Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Display the customers who have spent more than 11000 on orders.,"SELECT c.*, SUM(oi.quantity * oi.unit_price) AS total_spent FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id HAVING SUM(oi.quantity * oi.unit_price) > '11000';","Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
"List all products along with their prices and quantities in stock, sorted alphabetically by product name.","SELECT name, price, stock_quantity FROM Products ORDER BY name;","Products (product_id, name, price, stock_quantity)"
Retrieve the total number of orders placed by customers from India.,SELECT COUNT(*) AS total_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE c.country = 'India';,"Customers (customer_id, first_name, last_name, email, phone, country), Orders (order_id, customer_id, order_date)"
Show the orders placed on 03-03-2024.,SELECT * FROM Orders WHERE order_date = '03-03-2024';,"Orders (order_id, customer_id, order_date)"
"List all products along with their prices and quantities in stock, sorted by their quantities in stock in descending order.","SELECT name, price, stock_quantity FROM Products ORDER BY stock_quantity DESC;","Products (product_id, name, price, stock_quantity)"
Retrieve the total revenue generated from orders placed by customers in East region.,SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE c.region ='East';,"Customers (customer_id, first_name, last_name, email, phone, region), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Show the customers who have not provided their email addresses.,SELECT * FROM Customers WHERE email IS NULL OR email = '';,"Customers (customer_id, first_name, last_name, email, phone)"
Display the orders placed by customers who have been registered for more than 5  years.,"SELECT o.* FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE EXTRACT(YEAR FROM AGE(current_date, c.registration_date)) > '5';","Customers (customer_id, first_name, last_name, email, phone, registration_date), Orders (order_id, customer_id, order_date)"
List all products with prices above the average price of all products.,SELECT * FROM Products WHERE price > (SELECT AVG(price) FROM Products);,"Products (product_id, name, price, stock_quantity)"
"Retrieve the total number of orders placed by each customer, sorted in descending order by the number of orders.","SELECT customer_id, COUNT(order_id) AS total_orders FROM Orders GROUP BY customer_id ORDER BY total_orders DESC;","Orders (order_id, customer_id, order_date)"
Show the orders containing a 10 quantity of a product.,SELECT * FROM Order_Items WHERE quantity = '10';,"Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Display the products with a price lower than the average price of all products.,SELECT * FROM Products WHERE price < (SELECT AVG(price) FROM Products);,"Products (product_id, name, price, stock_quantity)"
List all orders along with the total number of products ordered in each order.,"SELECT o.order_id, COUNT(oi.product_id) AS total_products_ordered FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id;","Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Retrieve the total revenue generated from orders placed on weekends.,"SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id WHERE EXTRACT(DOW FROM o.order_date) IN (0, 6);","Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Show the customers who have placed orders in year 2020.,SELECT c.* FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE EXTRACT(YEAR FROM o.order_date) ='2020';,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date)"
Display the orders containing a specific product 154 with a quantity greater than 250.,SELECT * FROM Order_Items WHERE product_id = '154' AND quantity > '250';,"Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
List all customers who have placed orders within 14-10-2023 and 14-02-2024,SELECT DISTINCT c.* FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_date BETWEEN '14-10-2023' AND '14-02-2024';,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date)"
Retrieve the total revenue generated from orders placed by customers who have a gmail email domain.,SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE c.email LIKE '%@gmail';,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Show the products that have never been ordered.,SELECT * FROM Products p WHERE NOT EXISTS (SELECT 1 FROM Order_Items oi WHERE oi.product_id = p.product_id);,"Products (product_id, name, price, stock_quantity), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
List all customers who have placed orders with a total quantity greater than 10.,"SELECT c.* FROM Customers c JOIN (SELECT o.customer_id, SUM(oi.quantity) AS total_quantity FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.customer_id) AS total_orders ON c.customer_id = total_orders.customer_id WHERE total_orders.total_quantity > '10';","Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Retrieve the total revenue generated from orders placed by customers who registered within 2021.,SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE EXTRACT(YEAR FROM c.registration_date) = '2021';,"Customers (customer_id, first_name, last_name, email, phone, registration_date), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Show the orders containing products with prices above 16000.,SELECT * FROM Order_Items WHERE unit_price > '16000';,"Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Display the customers who have placed orders with a total amount greater than 26000.,"SELECT c.* FROM Customers c JOIN (SELECT o.customer_id, SUM(oi.quantity * oi.unit_price) AS total_amount FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.customer_id) AS total_orders ON c.customer_id = total_orders.customer_id WHERE total_orders.total_amount > '26000';","Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
"List all products along with their categories, sorted by category name and then by product name.","SELECT p.name AS product_name, c.name AS category_name FROM Products p JOIN Categories c ON p.category_id = c.category_id ORDER BY c.name, p.name;","Products (product_id, name, price, stock_quantity, category_id), Categories (category_id, name)"
Retrieve the total revenue generated from orders placed on weekdays.,SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id WHERE EXTRACT(DOW FROM o.order_date) BETWEEN 1 AND 5;,"Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Show the customers who have placed orders with a specific product 189.,SELECT c.* FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE oi.product_id = '189';,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Display the orders containing a specific product 120 with a unit price lower than 50.,SELECT * FROM Order_Items WHERE product_id = '120' AND unit_price < '50';,"Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
"List all products along with the number of orders in which they have been included, sorted by the number of orders in descending order.","SELECT p.*, COUNT(oi.order_id) AS order_count FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id ORDER BY order_count DESC;","Products (product_id, name, price, stock_quantity), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Retrieve the total revenue generated from orders placed by customers who have ordered more than 55 products.,"SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN (SELECT order_id, SUM(quantity) AS total_products FROM Order_Items GROUP BY order_id) AS total_products ON o.order_id = total_products.order_id WHERE total_products.total_products > '55';","Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Show the orders containing products with prices within 1000 and 10000.,SELECT * FROM Order_Items WHERE unit_price BETWEEN '1000' AND '10000';,"Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Display the customers who have placed orders with a total amount less than 5000.,"SELECT c.* FROM Customers c JOIN (SELECT o.customer_id, SUM(oi.quantity * oi.unit_price) AS total_amount FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.customer_id) AS total_orders ON c.customer_id = total_orders.customer_id WHERE total_orders.total_amount < '5000';","Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
"List all products along with their prices and quantities in stock, sorted by their names alphabetically.","SELECT name, price, stock_quantity FROM Products ORDER BY name;","Products (product_id, name, price, stock_quantity)"
Retrieve the total revenue generated from orders placed by customers who have placed orders on weekends.,"SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE EXTRACT(DOW FROM o.order_date) IN (0, 6);","Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
List all customers who have placed orders in a specific month of a given year.,SELECT DISTINCT c.* FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE EXTRACT(YEAR FROM o.order_date) = '2020' AND EXTRACT(MONTH FROM o.order_date) = '08';,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date)"
Retrieve the total number of orders placed by customers who have placed orders in a specific category of products.,SELECT COUNT(o.order_id) AS total_orders FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category_id = '14';,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price), Products (product_id, name, price, stock_quantity, category_id)"
Show the customers who have placed orders with a specific product and a quantity greater than a specified value.,SELECT DISTINCT c.* FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE oi.product_id = '15' AND oi.quantity > '210';,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Display the orders containing products with quantities below 150.,SELECT * FROM Order_Items WHERE quantity < '150';,"Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
"List all products along with their categories and quantities in stock, sorted by category name and then by product name.","SELECT p.name AS product_name, c.name AS category_name, p.stock_quantity FROM Products p JOIN Categories c ON p.category_id = c.category_id ORDER BY c.name, p.name;","Products (product_id, name, price, stock_quantity, category_id), Categories (category_id, name)"
Retrieve the total revenue generated from orders placed by customers who have placed orders in a specific city.,SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE c.city = 'Indore';,"Customers (customer_id, first_name, last_name, email, phone, city), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Show the orders containing products with prices above the average price of all products.,SELECT * FROM Order_Items WHERE unit_price > (SELECT AVG(unit_price) FROM Order_Items);,"Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Display the customers who have placed orders with a specific product category.,SELECT DISTINCT c.* FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category_id = '11';,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price), Products (product_id, name, price, stock_quantity, category_id)"
List all orders along with the total amount spent in each order.,"SELECT o.order_id, SUM(oi.quantity * oi.unit_price) AS total_amount FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id;","Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Retrieve the total revenue generated from orders placed on weekends in a specific month.,"SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id WHERE EXTRACT(MONTH FROM o.order_date) = '12' AND EXTRACT(DOW FROM o.order_date) IN (0, 6);","Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
"Show the orders containing products with prices within 1500 and 2500, sorted by the product names alphabetically.",SELECT * FROM Order_Items WHERE unit_price BETWEEN '1500' AND '2500' ORDER BY product_id;,"Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
List all orders along with the total number of products ordered in each order.,"SELECT o.order_id, COUNT(oi.product_id) AS total_products_ordered FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id;","Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Retrieve the total revenue generated from orders placed by customers who have placed orders on weekdays.,SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE EXTRACT(DOW FROM o.order_date) BETWEEN 1 AND 5;,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Show the orders containing products with quantities above 150.,SELECT * FROM Order_Items WHERE quantity > '150';,"Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Display the customers who have placed orders with a specific product category 25 and a total quantity greater than 14.,SELECT DISTINCT c.* FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category_id = '25' GROUP BY c.customer_id HAVING SUM(oi.quantity) > '14' ;,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price), Products (product_id, name, price, stock_quantity, category_id)"
"List all products along with their prices and quantities in stock, sorted by their prices in ascending order.","SELECT name, price, stock_quantity FROM Products ORDER BY price ASC;","Products (product_id, name, price, stock_quantity)"
Retrieve the total revenue generated from orders placed by customers who have placed orders in country India.,SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE c.country = 'India';,"Customers (customer_id, first_name, last_name, email, phone, country), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Show the orders containing products with prices below the average price of all products.,SELECT * FROM Order_Items WHERE unit_price < (SELECT AVG(unit_price) FROM Order_Items);,"Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Display the customers who have placed orders with a specific product 11.,SELECT DISTINCT c.* FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category_id = '11';,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price), Products (product_id, name, price, stock_quantity, category_id)"
List all orders along with the total amount spent in each order.,"SELECT o.order_id, SUM(oi.quantity * oi.unit_price) AS total_amount FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id;","Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Retrieve the total revenue generated from orders placed on weekends in December.,"SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id WHERE EXTRACT(MONTH FROM o.order_date) = '12' AND EXTRACT(DOW FROM o.order_date) IN (0, 6);","Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
"Show the orders containing products with prices within 1500 and 2500, sorted by the product names alphabetically.",SELECT * FROM Order_Items WHERE unit_price BETWEEN '1500' AND '2500' ORDER BY product_id;,"Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Retrieve the total revenue generated from orders placed on 15-02-2023.,SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id WHERE o.order_date = '15-02-2023' ;,"Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
List all customers who have not placed any orders yet.,SELECT * FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders);,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date)"
"Show the orders containing products with prices below 120, sorted by the order dates in ascending order.","SELECT oi.*, o.order_date FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id WHERE oi.unit_price < '120' ORDER BY o.order_date ASC;","Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Display the products with the highest prices.,SELECT * FROM Products WHERE price = (SELECT MAX(price) FROM Products);,"Products (product_id, name, price, stock_quantity)"
Retrieve the total revenue generated from orders placed by customers who have registered after 19-11-2023.,SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE c.registration_date > '19-11-2023' ;,"Customers (customer_id, first_name, last_name, email, phone, registration_date), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Show the customers who have placed orders with products from multiple categories.,SELECT c.* FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY c.customer_id HAVING COUNT(DISTINCT p.category_id) > 1;,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price), Products (product_id, name, price, stock_quantity, category_id)"
"List all products along with their prices and quantities in stock, sorted by their prices in descending order.","SELECT name, price, stock_quantity FROM Products ORDER BY price DESC;","Products (product_id, name, price, stock_quantity)"
Retrieve the total revenue generated from orders placed by customers who have placed orders in Hyderabad.,SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE c.city = 'Hyderabad' ;,"Customers (customer_id, first_name, last_name, email, phone, city), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
"Show the orders containing products with prices within a certain price range 500 and 1000 , sorted by the product names alphabetically.",SELECT * FROM Order_Items WHERE unit_price BETWEEN '500' AND '1000' ORDER BY product_id;,"Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Display the customers who have placed orders with a total amount greater than the average order amount.,SELECT DISTINCT c.* FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id HAVING SUM(oi.quantity * oi.unit_price) > (SELECT AVG(total_amount) FROM (SELECT SUM(oi.quantity * oi.unit_price) AS total_amount FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id) AS avg_amount);,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
"List all products along with their categories and prices, sorted by product price in descending order.","SELECT p.name AS product_name, c.name AS category_name, p.price FROM Products p JOIN Categories c ON p.category_id = c.category_id ORDER BY p.price DESC;","Products (product_id, name, price, stock_quantity, category_id), Categories (category_id, name)"
Retrieve the total revenue generated from orders placed by customers who have registered before 12-12-2022.,SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE c.registration_date < '12-12-2022' ;,"Customers (customer_id, first_name, last_name, email, phone, registration_date), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price)"
Show the products with the lowest prices.,SELECT * FROM Products WHERE price = (SELECT MIN(price) FROM Products);,"Products (product_id, name, price, stock_quantity)"
Display the customers who have placed orders with products from a specific category 12.,SELECT DISTINCT c.* FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category_id = '12';,"Customers (customer_id, first_name, last_name, email, phone), Orders (order_id, customer_id, order_date), Order_Items (order_item_id, order_id, product_id, quantity, unit_price), Products (product_id, name, price, stock_quantity, category_id)"